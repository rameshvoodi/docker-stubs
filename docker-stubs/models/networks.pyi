from typing import Any, Optional
from ..api import APIClient as APIClient
from ..utils import version_gte as version_gte
from .containers import Container as Container
from .resource import Collection as Collection, Model as Model

class Network(Model):
    @property
    def name(self) -> str: ...
    @property
    def containers(self) -> dict[str, Container]: ...
    def connect(self, container: Container, *args: Any, **kwargs: Any) -> None: ...
    def disconnect(self, container: Container, *args: Any, **kwargs: Any) -> None: ...
    def remove(self) -> None: ...

class NetworkCollection(Collection):
    model = Network
    def create(self, name: str, *args: Any, **kwargs: Any) -> Network: ...
    def get(self, network_id: str, *args: Any, **kwargs: Any) -> Network: ...
    def list(self, *args: Any, **kwargs: Any) -> list[Network]: ...
    def prune(self, filters: Optional[dict[str, Any]] = None) -> dict[str, Any]: ...
