import io
from typing import Optional, Any

cERROR_PIPE_BUSY: int
cSECURITY_SQOS_PRESENT: int
cSECURITY_ANONYMOUS: int
MAXIMUM_RETRY_COUNT: int

def check_closed(f: Any) -> Any: ...

class NpipeSocket:
    def __init__(self, handle: Optional[int] = None) -> None: ...
    def accept(self) -> None: ...
    def bind(self, address: str) -> None: ...
    def close(self) -> None: ...
    flags: int
    def connect(self, address: str, retry_count: int = MAXIMUM_RETRY_COUNT): ...
    def connect_ex(self, address: str): ...
    def detach(self) -> int: ...
    def dup(self): ...
    def getpeername(self) -> str: ...
    def getsockname(self) -> str: ...
    def getsockopt(
        self, level: int, optname: int, buflen: Optional[int] = None
    ) -> Any: ...
    def ioctl(self, control: int, option: Any) -> None: ...
    def listen(self, backlog: int) -> None: ...
    def makefile(
        self, mode: Optional[str] = None, bufsize: Optional[int] = None
    ) -> io.FileIO: ...
    def recv(self, bufsize: int, flags: int = 0) -> bytes: ...
    def recvfrom(self, bufsize: int, flags: int = 0) -> bytes: ...
    def recvfrom_into(self, buf: Any, nbytes: int = 0, flags: int = 0) -> int: ...
    def recv_into(self, buf: Any, nbytes: int = 0) -> int: ...
    def send(self, string: bytes, flags: int = 0) -> int: ...
    def sendall(self, string: bytes, flags: int = 0) -> None: ...
    def sendto(self, string: bytes, address: str) -> int: ...
    def setblocking(self, flag: bool) -> None: ...
    def settimeout(self, value: Optional[float]) -> None: ...
    def gettimeout(self) -> Optional[float]: ...
    def setsockopt(self, level: int, optname: int, value: Any) -> None: ...
    def shutdown(self, how: int) -> None: ...

class NpipeFileIOBase(io.RawIOBase):
    sock: NpipeSocket
    def __init__(self, npipe_socket: NpipeSocket) -> None: ...
    def close(self) -> None: ...
    def fileno(self) -> int: ...
    def isatty(self) -> bool: ...
    def readable(self) -> bool: ...
    def readinto(self, buf: Any) -> int: ...
    def seekable(self) -> bool: ...
    def writable(self) -> bool: ...
