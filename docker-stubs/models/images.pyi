from typing import Any, Dict, Optional, List, Generator
from ..api import APIClient as APIClient
from ..constants import DEFAULT_DATA_CHUNK_SIZE as DEFAULT_DATA_CHUNK_SIZE
from ..errors import (
    BuildError as BuildError,
    ImageLoadError as ImageLoadError,
    InvalidArgument as InvalidArgument,
)
from ..utils import parse_repository_tag as parse_repository_tag
from ..utils.json_stream import json_stream as json_stream
from .resource import Collection as Collection, Model as Model

class Image(Model):
    @property
    def labels(self) -> Dict[str, str]: ...
    @property
    def short_id(self) -> str: ...
    @property
    def tags(self) -> List[str]: ...
    def history(self) -> List[Dict[str, Any]]: ...
    def remove(self, force: bool = False, noprune: bool = False) -> None: ...
    def save(
        self, chunk_size: int = DEFAULT_DATA_CHUNK_SIZE, named: bool = False
    ) -> Generator[bytes, None, None]: ...
    def tag(
        self, repository: str, tag: Optional[str] = None, **kwargs: Any
    ) -> bool: ...

class RegistryData(Model):
    image_name: str
    def __init__(self, image_name: str, *args: Any, **kwargs: Any) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def short_id(self) -> str: ...
    def pull(
        self, platform: Optional[str] = None
    ) -> Generator[Dict[str, Any], None, None]: ...
    def has_platform(self, platform: str) -> bool: ...
    attrs: Dict[str, Any]
    def reload(self) -> None: ...

class ImageCollection(Collection):
    model = Image
    def build(self, **kwargs: Any) -> Image: ...
    def get(self, name: str) -> Image: ...
    def get_registry_data(
        self, name: str, auth_config: Optional[Dict[str, Any]] = None
    ) -> RegistryData: ...
    def list(
        self,
        name: Optional[str] = None,
        all: bool = False,
        filters: Optional[Dict[str, Any]] = None,
    ) -> List[Image]: ...
    def load(self, data: bytes) -> None: ...
    def pull(
        self,
        repository: str,
        tag: Optional[str] = None,
        all_tags: bool = False,
        **kwargs: Any
    ) -> Image: ...
    def push(
        self, repository: str, tag: Optional[str] = None, **kwargs: Any
    ) -> Generator[Dict[str, Any], None, None]: ...
    def remove(self, *args: Any, **kwargs: Any) -> None: ...
    def search(self, *args: Any, **kwargs: Any) -> List[Dict[str, Any]]: ...
    def prune(self, filters: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    def prune_builds(self, *args: Any, **kwargs: Any) -> Dict[str, Any]: ...

def normalize_platform(platform: str, engine_info: Dict[str, Any]) -> str: ...
