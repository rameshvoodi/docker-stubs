from typing import NamedTuple, Optional, Union
from .. import errors as errors
from ..constants import (
    BYTE_UNITS as BYTE_UNITS,
    DEFAULT_HTTP_HOST as DEFAULT_HTTP_HOST,
    DEFAULT_NPIPE as DEFAULT_NPIPE,
    DEFAULT_UNIX_SOCKET as DEFAULT_UNIX_SOCKET,
)
from ..tls import TLSConfig as TLSConfig

class URLComponents(NamedTuple):
    scheme: str
    netloc: str
    url: str
    params: str
    query: str
    fragment: str

def create_ipam_pool(*args, **kwargs) -> dict: ...
def create_ipam_config(*args, **kwargs) -> dict: ...
def decode_json_header(header: str) -> dict: ...
def compare_version(v1: str, v2: str) -> int: ...
def version_lt(v1: str, v2: str) -> bool: ...
def version_gte(v1: str, v2: str) -> bool: ...
def convert_port_bindings(port_bindings: dict) -> dict: ...
def convert_volume_binds(binds: list[str]) -> dict: ...
def convert_tmpfs_mounts(tmpfs: list[str]) -> dict: ...
def convert_service_networks(networks: list[str]) -> dict: ...
def parse_repository_tag(repo_name: str) -> tuple[str, str]: ...
def parse_host(
    addr: str, is_win32: bool = False, tls: bool = False
) -> URLComponents: ...
def parse_devices(devices: list[str]) -> list[dict]: ...
def kwargs_from_env(
    ssl_version: Optional[str] = None,
    assert_hostname: Optional[str] = None,
    environment: Optional[dict] = None,
) -> dict: ...
def convert_filters(filters: dict) -> str: ...
def datetime_to_timestamp(dt: str) -> int: ...
def parse_bytes(s: str) -> int: ...
def normalize_links(links: list[str]) -> list[str]: ...
def parse_env_file(env_file: str) -> dict[str, str]: ...
def split_command(command: str) -> list[str]: ...
def format_environment(environment: dict) -> str: ...
def format_extra_hosts(extra_hosts: list[str], task: bool = False) -> str: ...
def create_host_config(self, *args, **kwargs) -> dict: ...
