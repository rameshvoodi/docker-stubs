from typing import Optional, Union, List, Tuple
from ..constants import IS_WINDOWS_PLATFORM
from .fnmatch import fnmatch
from io import BytesIO

def tar(
    path: str,
    exclude: Optional[List[str]] = None,
    dockerfile: Optional[str] = None,
    fileobj: Optional[BytesIO] = None,
    gzip: bool = False,
) -> BytesIO: ...
def exclude_paths(
    root: str, patterns: List[str], dockerfile: Optional[str] = None
) -> List[str]: ...
def build_file_list(root: str) -> List[str]: ...
def create_archive(
    root: str,
    files: Optional[List[str]] = None,
    fileobj: Optional[BytesIO] = None,
    gzip: bool = False,
    extra_files: Optional[List[Tuple[str, str]]] = None,
) -> BytesIO: ...
def mkbuildcontext(dockerfile: str) -> BytesIO: ...
def split_path(p: str) -> List[str]: ...
def normalize_slashes(p: str) -> str: ...
def walk(root: str, patterns: List[str], default: bool = True) -> List[str]: ...

class PatternMatcher:
    patterns: List[str]
    def __init__(self, patterns: List[str]) -> None: ...
    def matches(self, filepath: str) -> bool: ...
    def walk(self, root: str) -> List[str]: ...

class Pattern:
    exclusion: bool
    dirs: List[str]
    cleaned_pattern: str
    def __init__(self, pattern_str: str) -> None: ...
    @classmethod
    def normalize(cls, p: str) -> str: ...
    def match(self, filepath: str) -> bool: ...
