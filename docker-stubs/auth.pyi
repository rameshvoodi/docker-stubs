from typing import Optional, Dict, Any, Tuple
from . import credentials as credentials, errors as errors
from .utils import config as config
from logging import Logger

INDEX_NAME: str
INDEX_URL: str
TOKEN_USERNAME: str
log: Logger

def resolve_repository_name(repo_name: str) -> str: ...
def resolve_index_name(index_name: str) -> str: ...
def get_config_header(client: Any, registry: str) -> Dict[str, str]: ...
def split_repo_name(repo_name: str) -> Tuple[str, str]: ...
def get_credential_store(authconfig: Dict[str, Any], registry: str) -> Any: ...

class AuthConfig(dict):
    def __init__(
        self, dct: Dict[str, Any], credstore_env: Optional[Dict[str, Any]] = None
    ) -> None: ...
    @classmethod
    def parse_auth(
        cls, entries: Dict[str, Any], raise_on_error: bool = False
    ) -> Dict[str, Any]: ...
    @classmethod
    def load_config(
        cls,
        config_path: str,
        config_dict: Dict[str, Any],
        credstore_env: Optional[Dict[str, Any]] = None,
    ) -> "AuthConfig": ...
    @property
    def auths(self) -> Dict[str, Any]: ...
    @property
    def creds_store(self) -> str: ...
    @property
    def cred_helpers(self) -> Dict[str, Any]: ...
    @property
    def is_empty(self) -> bool: ...
    def resolve_authconfig(self, registry: Optional[str] = None) -> Dict[str, Any]: ...
    def get_credential_store(self, registry: str) -> Any: ...
    def get_all_credentials(self) -> Dict[str, Any]: ...
    def add_auth(self, reg: str, data: Dict[str, Any]) -> None: ...

def resolve_authconfig(
    authconfig: Dict[str, Any],
    registry: Optional[str] = None,
    credstore_env: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]: ...
def convert_to_hostname(url: str) -> str: ...
def decode_auth(auth: str) -> Dict[str, Any]: ...
def encode_header(auth: Dict[str, Any]) -> str: ...
def parse_auth(
    entries: Dict[str, Any], raise_on_error: bool = False
) -> Dict[str, Any]: ...
def load_config(
    config_path: Optional[str] = None,
    config_dict: Optional[Dict[str, Any]] = None,
    credstore_env: Optional[Dict[str, Any]] = None,
) -> Dict[str, Any]: ...
