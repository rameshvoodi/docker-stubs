from typing import Any, Dict, Optional, List, Generator
from .. import errors as errors
from .resource import Collection as Collection, Model as Model

class Plugin(Model):
    @property
    def name(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def settings(self) -> Dict[str, Any]: ...
    def configure(self, options: Dict[str, Any]) -> None: ...
    def disable(self, force: bool = False) -> None: ...
    def enable(self, timeout: int = 30) -> None: ...
    def push(self) -> None: ...
    def remove(self, force: bool = False) -> None: ...
    def upgrade(
        self, remote: Optional[str] = None
    ) -> Generator[Dict[str, Any], None, None]: ...

class PluginCollection(Collection):
    model = Plugin
    def create(self, name: str, plugin_data_dir: str, gzip: bool = False) -> Plugin: ...
    def get(self, name: str) -> Plugin: ...
    def install(self, remote_name: str, local_name: Optional[str] = None) -> Plugin: ...
    def list(self) -> List[Plugin]: ...
