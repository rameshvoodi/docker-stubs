from typing import Any, Dict, Optional
from ..api import APIClient as APIClient

class Model:
    id_attribute: str
    client: APIClient
    collection: "Collection"
    attrs: Dict[str, Any]
    def __init__(
        self,
        attrs: Optional[Dict[str, Any]] = None,
        client: Optional[APIClient] = None,
        collection: Optional["Collection"] = None,
    ) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def id(self) -> str: ...
    @property
    def short_id(self) -> str: ...
    def reload(self) -> None: ...

class Collection:
    model: Model
    client: APIClient
    def __init__(self, client: Optional[APIClient] = None) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any) -> None: ...
    def list(self) -> None: ...
    def get(self, key: str) -> Model: ...
    def create(self, **kwargs: Any) -> Model: ...
    def prepare_model(self, attrs: Dict[str, Any]) -> Model: ...
