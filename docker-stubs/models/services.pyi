from typing import Any, Dict, Optional, List
from docker.errors import InvalidArgument
from docker.types import ContainerSpec, Placement, ServiceMode, TaskTemplate
from .resource import Collection as Collection, Model as Model

class Service(Model):
    id_attribute: str = "ID"
    @property
    def name(self) -> str: ...
    @property
    def version(self) -> Dict[str, Any]: ...
    def remove(self) -> None: ...
    def tasks(
        self, filters: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, Any]]: ...
    def update(self, **kwargs: Any) -> Dict[str, Any]: ...
    def logs(self, **kwargs: Any) -> Any: ...
    def scale(self, replicas: int) -> None: ...
    def force_update(self) -> None: ...

class ServiceCollection(Collection):
    model = Service
    def create(
        self, image: str, command: Optional[List[str]] = None, **kwargs: Any
    ) -> Service: ...
    def get(
        self, service_id: str, insert_defaults: Optional[bool] = None
    ) -> Service: ...
    def list(self, **kwargs: Any) -> List[Service]: ...

CONTAINER_SPEC_KWARGS: Dict[str, Any]
TASK_TEMPLATE_KWARGS: Dict[str, Any]
CREATE_SERVICE_KWARGS: Dict[str, Any]
PLACEMENT_KWARGS: Dict[str, Any]
